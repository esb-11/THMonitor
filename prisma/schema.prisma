generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  moduleFormat = "esm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model history {
  id              Int      @id @default(autoincrement())
  date            DateTime @db.Date
  min_temperature Int
  max_temperature Int
  min_humidity    Int
  max_humidity    Int
  location        String   @db.VarChar(255)
  position        String   @db.VarChar(255)
}

model locations {
  location_id Int     @id @default(autoincrement())
  location    String  @unique @db.VarChar(255)
  email       String? @db.VarChar(255)
  map         map[]
  today       today[]
}

model map {
  sensor_id   Int        @id
  location_id Int?
  position_id Int?
  locations   locations? @relation(fields: [location_id], references: [location_id], onUpdate: NoAction, map: "fk_location")
  positions   positions? @relation(fields: [position_id], references: [position_id], onUpdate: NoAction, map: "fk_position")
  sensors     sensors    @relation(fields: [sensor_id], references: [sensor_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sensors")
}

model positions {
  position_id     Int     @id @default(autoincrement())
  position        String  @unique @db.VarChar(255)
  min_temperature Int
  max_temperature Int
  min_humidity    Int
  max_humidity    Int
  map             map[]
  today           today[]
}

model sensors {
  sensor_id Int    @id @default(autoincrement())
  sensor    String @unique @db.VarChar(255)
  map       map?
}

model today {
  min_temperature Int
  max_temperature Int
  min_humidity    Int
  max_humidity    Int
  location_id     Int
  position_id     Int
  locations       locations @relation(fields: [location_id], references: [location_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_location")
  positions       positions @relation(fields: [position_id], references: [position_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_position")

  @@id([location_id, position_id])
}
